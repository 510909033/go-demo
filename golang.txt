所有的defer语句会放入栈中，在入栈的时候会进行相关的值拷贝（也就是下面的“对应的参数会实时解析”）。

defer、return、返回值三者的执行逻辑应该是：
return最先执行，return负责将结果写入返回值中；
接着defer开始执行一些收尾工作；
最后函数携带当前返回值（可能和最初的返回值不相同）退出

（1）无名返回值：
    解释：返回值由变量i赋值，相当于返回值=i=0。第二个defer中i++ = 1， 第一个defer中i++ = 2，所以最终i的值是2。但是返回值已经被赋值了，即使后续修改i也不会影响返回值。最终返回值返回，所以main中打印0。

（2）有名返回值：
    解释：这里已经指明了返回值就是i，所以后续对i进行修改都相当于在修改返回值，所以最终函数的返回值是2。

（3）函数返回值为地址
    此时的返回值是一个指针（地址），这个指针=&i，相当于指向变量i所在的地址，两个defer语句都对i进行了修改，那么返回值指向的地址的内容也发生了改变，所以最终的返回值是2。

在panic语句后面的defer语句不被执行
在panic语句前的defer语句会被执行

func deferExit() {
    defer func() {
        fmt.Println("defer")
    }()
    os.Exit(0)
}
当调用os.Exit()方法退出程序时，defer并不会被执行，上面的defer并不会输出。

+++++++++++++++++++++++
2、请说出下面代码存在什么问题。
type student struct {
	Name string
}

func zhoujielun(v interface{}) {
	switch msg := v.(type) {
	case *student, student:
		msg.Name
	}
}
解析：

golang中有规定，switch type的case T1，类型列表只有一个，那么v := m.(type)中的v的类型就是T1类型。
如果是case T1, T2，类型列表中有多个，那v的类型还是多对应接口的类型，也就是m的类型。
所以这里msg的类型还是interface{}，所以他没有Name这个字段，编译阶段就会报错。具体解释见：https://golang.org/ref/spec#Type_switches

+++++++++
type People struct {
	name string `json:"name"`
}

func main() {
	js := `{
		"name":"11"
	}`
	var p People
	err := json.Unmarshal([]byte(js), &p)
	if err != nil {
		fmt.Println("err: ", err)
		return
	}
	fmt.Println("people: ", p)
}
